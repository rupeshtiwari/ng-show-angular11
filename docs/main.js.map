{"version":3,"sources":["./src/environments/environment.ts","./src/app/shared/shared.module.ts","./src/app/shared/ng-show.directive.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAEO;;AAO/C,MAAM,YAAY;;wEAAZ,YAAY;2FAAZ,YAAY;+FAJd,CAAC,4DAAY,CAAC;mIAIZ,YAAY,mBAHR,kEAAe,aADpB,4DAAY,aAEZ,kEAAe;;;;;;;;;;;;;;;;;ACN3B;;;;;;;;;;GAUG;AAII,MAAM,eAAe;IAC1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,IACI,MAAM,CAAC,SAAkB;QAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvB,CAAC;IAEO,IAAI,CAAC,KAAc;QACzB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9D,CAAC;;8EAVU,eAAe;+FAAf,eAAe;;;;;;;;;;;;;;;;;;;ACVrB,MAAM,YAAY;IAJzB;QAKE,SAAI,GAAG,IAAI,CAAC;KACb;;wEAFY,YAAY;4FAAZ,YAAY;QCNzB,sEAAK;QAEH,sEAAK;QACH,4EAAuD;QAA/C,+IAAc,IAAI,IAAC;QAA4B,+DAAI;QAAA,4DAAS;QACpE,4EAA6B;QAArB,+IAAc,KAAK,IAAC;QAAC,+DAAI;QAAA,4DAAS;QAE5C,4DAAM;QAEN,yEAAqB;QAEnB,qEAAI;QAAA,6HAAkE;QAAA,4DAAK;QAE7E,4DAAM;QAER,4DAAM;;QANC,0DAAe;QAAf,4EAAe;;;;;;;;;;;;;;ACPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACX;AACO;;AAQ/C,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,2DAAY;6FADb,EAAE,YADJ,CAAC,uEAAa,EAAE,kEAAY,CAAC;mIAI3B,SAAS,mBALL,2DAAY,aACjB,uEAAa,EAAE,kEAAY;;;;;;;;;;;;;;;;;;;ACPQ;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgShowDirective } from './ng-show.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgShowDirective],\n  exports: [NgShowDirective],\n})\nexport class SharedModule {}\n","import { Directive, ElementRef, Input } from '@angular/core';\r\n\r\n/**\r\n * ## Example\r\n * ```html\r\n * <button [ngShow]=\"show\">Create</button>\r\n * ```\r\n * ```ts\r\n * get show() {\r\n *   return false; // it will hide button. If you pass `true` it will show button.\r\n * }\r\n * ```\r\n */\r\n@Directive({\r\n  selector: '[ngShow]',\r\n})\r\nexport class NgShowDirective {\r\n  constructor(private ngEl: ElementRef) {}\r\n\r\n  @Input()\r\n  set ngShow(condition: boolean) {\r\n    this.show(condition);\r\n  }\r\n\r\n  private show(value: boolean): void {\r\n    this.ngEl.nativeElement.style.display = value ? '' : 'none';\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  show = true;\n}\n","<div>\n\n  <div>\n    <button (click)=\"show=true\" style=\"margin-right:10px;\">Show</button>\n    <button (click)=\"show=false\">Hide</button>\n\n  </div>\n\n  <div [ngShow]=\"show\">\n\n    <h2>We have created custom `ngShow` directive to show hide this text. </h2>\n\n  </div>\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, SharedModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}